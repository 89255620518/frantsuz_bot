import axios from 'axios';
import dotenv from 'dotenv';
import { URLSearchParams } from 'url';
import base64 from 'base-64';
import { sendUserTicketEmail, sendAdminNotification } from './emailService.js';
import TicketService from './ticketService.js'

dotenv.config();

const PAYKEEPER_USER = process.env.PAYKEEPER_USER;
const PAYKEEPER_PASSWORD = process.env.PAYKEEPER_PASSWORD;
const PAYKEEPER_SERVER = process.env.PAYKEEPER_SERVER?.replace(/\/$/, '');

if (!PAYKEEPER_USER || !PAYKEEPER_PASSWORD || !PAYKEEPER_SERVER) {
    console.error('–û—à–∏–±–∫–∞: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ PayKeeper –≤ .env —Ñ–∞–π–ª–µ');
    process.exit(1);
}

const authString = `${PAYKEEPER_USER}:${PAYKEEPER_PASSWORD}`;
const base64Auth = base64.encode(authString);

const headers = {
    'Content-Type': 'application/x-www-form-urlencoded',
    'Authorization': `Basic ${base64Auth}`
};

export const initializePaymentSystem = async () => {
    console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PayKeeper...');

    try {
        const testUrl = `${PAYKEEPER_SERVER}/info/`;
        const response = await axios.get(testUrl, {
            headers,
            timeout: 5000
        });

        if (response.data && response.data.status === 'ok') {
            console.log('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PayKeeper');
            return true;
        }
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç PayKeeper');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PayKeeper:', error.message);
        return false;
    }
};

export const processPayment = async (bot, chatId, ticketData) => {
    if (!ticketData?.customer?.first_name || !ticketData?.customer?.last_name) {
        throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è');
    }
    try {
        const tokenResponse = await axios.post(
            `${PAYKEEPER_SERVER}/info/settings/token/`,
            {},
            { headers, timeout: 10000 }
        );

        const token = tokenResponse.data?.token;
        if (!token) throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –æ—Ç PayKeeper');
        const customerName = `${ticketData.customer.first_name} ${ticketData.customer.last_name}`.trim();

        const paymentParams = new URLSearchParams();
        paymentParams.append('pay_amount', ticketData.price);
        paymentParams.append('clientid', customerName.substring(0, 100));
        paymentParams.append('orderid', ticketData.number);
        paymentParams.append('service_name', `–ë–∏–ª–µ—Ç: ${ticketData.event.title}`.substring(0, 100));
        paymentParams.append('client_email', ticketData.customer.email);
        paymentParams.append('client_phone', ticketData.customer.phone);
        paymentParams.append('token', token);
        paymentParams.append('payment_currency', 'RUB');
        paymentParams.append('payment_details', `–ë–∏–ª–µ—Ç ‚Ññ${ticketData.number}`);

        const invoiceResponse = await axios.post(
            `${PAYKEEPER_SERVER}/change/invoice/preview/`,
            paymentParams,
            { headers, timeout: 15000 }
        );

        const invoiceId = invoiceResponse.data?.invoice_id;
        if (!invoiceId) throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω ID —Å—á–µ—Ç–∞');

        const paymentUrl = `${PAYKEEPER_SERVER}/bill/${invoiceId}/`;
        
        await bot.sendMessage(
            chatId,
            `üéüÔ∏è *–ë–∏–ª–µ—Ç ‚Ññ${ticketData.number}*\n\n` +
            `üé≠ *${ticketData.event.title}*\n` +
            `üìÖ ${ticketData.event.date} –≤ ${ticketData.event.time}\n` +
            `üìç ${ticketData.event.location}\n` +
            `üí∞ *${ticketData.price} —Ä—É–±.*\n\n` +
            `–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å" –Ω–∏–∂–µ\n\n` +
            `–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"`,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: paymentUrl }],
                        [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data: `check_payment_${invoiceId}` }],
                        [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_payment' }]
                    ]
                }
            }

        );

        return { success: true, invoiceId };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
        await bot.sendMessage(
            chatId,
            '‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞*\n\n' +
            '–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É.\n' +
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n' +
            'üìû +7(968)090-55-50',
            { parse_mode: 'Markdown' }
        );
        return { success: false, error: error.message };
    }
};

export const checkPaymentStatus = async (bot, chatId, invoiceId) => {
    try {
        const response = await axios.get(
            `${PAYKEEPER_SERVER}/info/invoice/status/?id=${invoiceId}`,
            { headers, timeout: 10000 }
        );

        const status = response.data?.status;

        if (status === 'paid') {
            const userState = userStates[chatId];

            const ticketData = {
                number: `FR-${Date.now()}-${Math.floor(Math.random() * 1000)}`,
                event: userState.eventData,
                customer: {
                    name: userState.name,
                    phone: userState.phone,
                    email: userState.email,
                },
                price: userState.eventData.price,
                invoiceId: invoiceId
            };

            await TicketService.confirmPayment(invoiceId);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await sendUserTicketEmail(userState.email, ticketData);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await sendAdminNotification('zakaz@dali-khinkali.ru', ticketData);

            await bot.sendMessage(
                chatId,
                '‚úÖ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n' +
                '–í–∞—à –±–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω. –ù–∞ –≤–∞—à email (' + userState.email + ') –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –±–∏–ª–µ—Ç–æ–º.\n\n' +
                '–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–≤–æ–Ω–∏—Ç–µ:\n' +
                'üìû +7(968)090-55-50',
                { parse_mode: 'Markdown' }
            );
        } else {
            await bot.sendMessage(
                chatId,
                '‚ö†Ô∏è *–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*\n\n' +
                '–ú—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã.\n' +
                '–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–Ω–æ–≤–∞.',
                { parse_mode: 'Markdown' }
            );
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
        await bot.sendMessage(
            chatId,
            '‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞*\n\n' +
            '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
            { parse_mode: 'Markdown' }
        );
    }
};
