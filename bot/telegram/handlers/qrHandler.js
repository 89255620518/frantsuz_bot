// qrHandler.js
import { bot } from '../botInstance.js';
import { UserTicket } from '../../models/UserTicket.js';
import { Ticket } from '../../models/Event.js';
import { Order } from '../../models/Orders.js';
import { OrderItem } from '../../models/OrderItem.js';
import { User } from '../../models/User.js';
import { formatDate } from '../../services/dateFormatters.js';

export const setupQRScanner = () => {
    console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞ QR-–∫–æ–¥–æ–≤...');

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on('message', async (msg) => {
        if (!msg.text) return;

        const chatId = msg.chat.id;
        let ticketNumber = msg.text.trim();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
        if (msg.text.startsWith('/start ')) {
            const param = msg.text.split(' ')[1].trim();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            if (/^\d+$/.test(param)) {
                ticketNumber = `–§—Ä–∞–Ω—Ü—É–∑-${param}`;
            } else {
                ticketNumber = param;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –±–∏–ª–µ—Ç–∞ (–¥–æ–ø—É—Å–∫–∞–µ–º –∫–∞–∫ "–§—Ä–∞–Ω—Ü—É–∑-123", —Ç–∞–∫ –∏ "Frantsuz-123")
        if (!ticketNumber.match(/^(–§—Ä–∞–Ω—Ü—É–∑-|Frantsuz-)\d+$/i)) {
            return; // –ù–µ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É "–§—Ä–∞–Ω—Ü—É–∑-XXXXXX"
        ticketNumber = ticketNumber.replace(/^Frantsuz-/i, '–§—Ä–∞–Ω—Ü—É–∑-');

        console.log(`[QR] –ù–∞–π–¥–µ–Ω –±–∏–ª–µ—Ç: ${ticketNumber}`);
        await processTicket(chatId, ticketNumber);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –±–∏–ª–µ—Ç–∞ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
    bot.on('callback_query', async (callbackQuery) => {
        const data = callbackQuery.data;
        const chatId = callbackQuery.message.chat.id;

        if (data.startsWith('mark_used_')) {
            await handleMarkUsed(callbackQuery, chatId, data);
        }
    });
};

export async function processTicket(chatId, ticketNumber) {
    try {
        const userTicket = await UserTicket.findOne({
            where: { ticket_number: ticketNumber },
            include: [
                {
                    model: Ticket,
                    as: 'ticket',
                    attributes: ['title', 'description', 'image_url', 'event_date', 'event_location', 'price']
                },
                {
                    model: OrderItem,
                    as: 'order_item',
                    include: [{
                        model: Order,
                        as: 'order',
                        attributes: ['first_name', 'last_name', 'email', 'phone', 'status']
                    }]
                }
            ]
        });

        if (!userTicket) {
            return bot.sendMessage(chatId, '‚ùå –ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞.');
        }

        const user = await User.findOne({ where: { telegram_id: chatId } });
        const isAdmin = user?.is_admin || false;

        const message = buildTicketMessage(userTicket);
        const options = { parse_mode: 'Markdown' };

        if (isAdmin && !userTicket.is_used) {
            options.reply_markup = {
                inline_keyboard: [
                    [{
                        text: '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π',
                        callback_data: `mark_used_${userTicket.id}`
                    }]
                ]
            };
        }

        if (userTicket.ticket.image_url) {
            await bot.sendPhoto(chatId, userTicket.ticket.image_url, {
                caption: message,
                ...options
            });
        } else {
            await bot.sendMessage(chatId, message, options);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏–ª–µ—Ç–∞:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∏–ª–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

function buildTicketMessage(userTicket) {
    return `üéüÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–µ* üéüÔ∏è\n\n` +
        `üìå *–ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞:* ${userTicket.ticket_number}\n` +
        `üìå *–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:* ${userTicket.ticket.title}\n` +
        `üìÖ *–î–∞—Ç–∞:* ${formatDate(userTicket.ticket.event_date)}\n` +
        `üìç *–ú–µ—Å—Ç–æ:* ${userTicket.ticket.event_location}\n` +
        `üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${userTicket.ticket.price} —Ä—É–±.\n\n` +
        `üë§ *–î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:*\n` +
        `‚Ä¢ –ò–º—è: ${userTicket.order_item.order.first_name} ${userTicket.order_item.order.last_name}\n` +
        `‚Ä¢ Email: ${userTicket.order_item.order.email}\n` +
        `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${userTicket.order_item.order.phone}\n\n` +
        `üîÑ *–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:* ${userTicket.payment_status === 'paid' ? '‚úÖ –û–ø–ª–∞—á–µ–Ω' : '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω'}\n` +
        `üé≠ *–°—Ç–∞—Ç—É—Å –±–∏–ª–µ—Ç–∞:* ${userTicket.is_used ? '‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}`;
}

async function handleMarkUsed(callbackQuery, chatId, data) {
    try {
        const ticketId = data.split('_')[2];
        const userTicket = await UserTicket.findByPk(ticketId);

        if (!userTicket) {
            return bot.answerCallbackQuery(callbackQuery.id, { text: '–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const user = await User.findOne({ where: { telegram_id: chatId } });
        if (!user?.is_admin) {
            return bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
        }

        await userTicket.update({ is_used: true, used_at: new Date() });

        await bot.editMessageReplyMarkup(
            { inline_keyboard: [] },
            { chat_id: chatId, message_id: callbackQuery.message.message_id }
        );

        await bot.answerCallbackQuery(callbackQuery.id, { text: '–ë–∏–ª–µ—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π' });
        await bot.sendMessage(chatId, '‚úÖ –ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –±–∏–ª–µ—Ç–∞:', error);
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
}