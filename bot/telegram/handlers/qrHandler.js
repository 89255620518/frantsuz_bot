import { bot } from '../botInstance.js';
import { UserTicket } from '../../models/UserTicket.js';
import { Ticket } from '../../models/Event.js';
import { Order } from '../../models/Orders.js';
import { OrderItem } from '../../models/OrderItem.js';
import { formatDate } from '../../services/dateFormatters.js';

export const setupQRHandlers = () => {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö QR-–∫–æ–¥–æ–≤
    bot.onText(/–§—Ä–∞–Ω—Ü—É–∑-|Frantsuz-/i, async (msg) => {
        const chatId = msg.chat.id;
        const ticketNumber = msg.text.trim();

        try {
            // –ù–∞—Ö–æ–¥–∏–º –±–∏–ª–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userTicket = await UserTicket.findOne({
                where: { ticket_number: ticketNumber },
                include: [
                    {
                        model: Ticket,
                        as: 'ticket',
                        attributes: ['title', 'description', 'image_url', 'event_date', 'event_location', 'price']
                    },
                    {
                        model: OrderItem,
                        as: 'order_item',
                        include: [{
                            model: Order,
                            as: 'order',
                            attributes: ['first_name', 'last_name', 'email', 'phone', 'status']
                        }]
                    }
                ]
            });

            if (!userTicket) {
                return bot.sendMessage(chatId, '‚ùå –ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å QR-–∫–æ–¥–∞.');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            const user = await User.findOne({ where: { telegram_id: chatId } });
            const isAdmin = user?.is_admin || false;

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∏–ª–µ—Ç–µ
            let message = `üéüÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–µ* üéüÔ∏è\n\n` +
                `üìå *–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:* ${userTicket.ticket.title}\n` +
                `üìÖ *–î–∞—Ç–∞:* ${formatDate(userTicket.ticket.event_date)}\n` +
                `üìç *–ú–µ—Å—Ç–æ:* ${userTicket.ticket.event_location}\n` +
                `üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* ${userTicket.ticket.price} —Ä—É–±.\n\n` +
                `üë§ *–î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:*\n` +
                `‚Ä¢ –ò–º—è: ${userTicket.order_item.order.first_name} ${userTicket.order_item.order.last_name}\n` +
                `‚Ä¢ Email: ${userTicket.order_item.order.email}\n` +
                `‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${userTicket.order_item.order.phone}\n\n` +
                `üîÑ *–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:* ${userTicket.payment_status === 'paid' ? '‚úÖ –û–ø–ª–∞—á–µ–Ω' : '‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω'}\n` +
                `üé≠ *–°—Ç–∞—Ç—É—Å –±–∏–ª–µ—Ç–∞:* ${userTicket.is_used ? '‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}`;

            // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            if (userTicket.ticket.image_url) {
                const options = {
                    caption: message,
                    parse_mode: 'Markdown'
                };

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                if (isAdmin && !userTicket.is_used) {
                    options.reply_markup = {
                        inline_keyboard: [
                            [{
                                text: '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π',
                                callback_data: `mark_used_${userTicket.id}`
                            }]
                        ]
                    };
                }

                await bot.sendPhoto(chatId, userTicket.ticket.image_url, options);
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                const options = {
                    parse_mode: 'Markdown'
                };

                if (isAdmin && !userTicket.is_used) {
                    options.reply_markup = {
                        inline_keyboard: [
                            [{
                                text: '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π',
                                callback_data: `mark_used_${userTicket.id}`
                            }]
                        ]
                    };
                }

                await bot.sendMessage(chatId, message, options);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞:', error);
            await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –±–∏–ª–µ—Ç–∞ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
    bot.on('callback_query', async (callbackQuery) => {
        const data = callbackQuery.data;
        const chatId = callbackQuery.message.chat.id;

        if (data.startsWith('mark_used_')) {
            try {
                const ticketId = data.split('_')[2];
                const userTicket = await UserTicket.findByPk(ticketId);

                if (!userTicket) {
                    return bot.answerCallbackQuery(callbackQuery.id, { text: '–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                const user = await User.findOne({ where: { telegram_id: chatId } });
                if (!user?.is_admin) {
                    return bot.answerCallbackQuery(callbackQuery.id, { text: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∏–ª–µ—Ç–∞
                await userTicket.update({
                    is_used: true,
                    used_at: new Date()
                });

                // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                await bot.editMessageReplyMarkup(
                    { inline_keyboard: [] },
                    {
                        chat_id: chatId,
                        message_id: callbackQuery.message.message_id
                    }
                );

                await bot.answerCallbackQuery(callbackQuery.id, { text: '–ë–∏–ª–µ—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π' });
                await bot.sendMessage(chatId, '‚úÖ –ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π.');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –±–∏–ª–µ—Ç–∞:', error);
                await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
            }
        }
    });
};