// adminHandlers.js
import { bot } from '../botInstance.js';
import { userStates } from '../../state.js';
import ticketService from '../../services/TicketService.js';
import { showMainMenu } from './mainMenu.js';

// –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
export const showAdminTicketsMenu = async (chatId) => {
    await bot.sendMessage(chatId, 'üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞–º–∏:', {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '‚ûï –°–æ–∑–¥–∞—Ç—å –±–∏–ª–µ—Ç', callback_data: 'admin_create_ticket' },
                    { text: 'üìã –°–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤', callback_data: 'admin_list_tickets' }
                ],
                [
                    { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç', callback_data: 'admin_edit_ticket_select' },
                    { text: '‚ùå –£–¥–∞–ª–∏—Ç—å –±–∏–ª–µ—Ç', callback_data: 'admin_delete_ticket_select' }
                ],
                [
                    { text: 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main' }
                ]
            ]
        }
    });
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–ª–µ—Ç–∞
const handleCreateTicket = async (chatId) => {
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
        '<b>–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–î–∞—Ç–∞(–ì–ì–ì–ì-–ú–ú-–î–î)|–ú–µ—Å—Ç–æ|–¶–µ–Ω–∞|URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>\n\n' +
        '–ü—Ä–∏–º–µ—Ä: –ö–æ–Ω—Ü–µ—Ä—Ç –≥—Ä—É–ø–ø—ã XYZ|–û—Ç–ª–∏—á–Ω—ã–π –∫–æ–Ω—Ü–µ—Ä—Ç|2023-12-31|–ö–ª—É–± "–§—Ä–∞–Ω—Ü—É–∑"|1500|https://example.com/image.jpg',
        { parse_mode: 'HTML' }
    );

    userStates[chatId] = {
        isAdminAction: true,
        step: 'creating_ticket'
    };
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤
const handleListTickets = async (chatId) => {
    try {
        const tickets = await ticketService.getAllTickets();

        if (!tickets || tickets.length === 0) {
            return await bot.sendMessage(chatId, 'üì≠ –°–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤ –ø—É—Å—Ç');
        }

        let message = 'üéüÔ∏è <b>–°–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤:</b>\n\n';
        tickets.forEach(ticket => {
            message += `‚ñ´Ô∏è <b>${ticket.title}</b>\n` +
                `ID: ${ticket.id}\n` +
                `–î–∞—Ç–∞: ${ticket.event_date}\n` +
                `–¶–µ–Ω–∞: ${ticket.price} —Ä—É–±.\n\n`;
        });

        await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
        await showAdminTicketsMenu(chatId);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤:', error);
        await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤');
    }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–∏–ª–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const handleSelectTicketForEdit = async (chatId) => {
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ ID –±–∏–ª–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:');
    userStates[chatId] = {
        isAdminAction: true,
        step: 'selecting_ticket_for_edit'
    };
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–ª–µ—Ç–∞
const handleEditTicket = async (chatId, ticketId) => {
    try {
        const ticket = await ticketService.getTicketById(ticketId);
        if (!ticket) {
            return await bot.sendMessage(chatId, '‚ùå –ë–∏–ª–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        await bot.sendMessage(chatId, `–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç–∞ (ID: ${ticket.id}):\n\n` +
            `–ù–∞–∑–≤–∞–Ω–∏–µ: ${ticket.title}\n` +
            `–û–ø–∏—Å–∞–Ω–∏–µ: ${ticket.description}\n` +
            `–î–∞—Ç–∞: ${ticket.event_date}\n` +
            `–ú–µ—Å—Ç–æ: ${ticket.event_location}\n` +
            `–¶–µ–Ω–∞: ${ticket.price}\n\n` +
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
            '<b>–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–î–∞—Ç–∞(–ì–ì–ì–ì-–ú–ú-–î–î)|–ú–µ—Å—Ç–æ|–¶–µ–Ω–∞|URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>',
            { parse_mode: 'HTML' }
        );

        userStates[chatId] = {
            isAdminAction: true,
            step: 'editing_ticket',
            ticketId: ticketId
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–∞:', error);
        await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–∞');
    }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±–∏–ª–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
const handleSelectTicketForDelete = async (chatId) => {
    await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ ID –±–∏–ª–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:');
    userStates[chatId] = {
        isAdminAction: true,
        step: 'selecting_ticket_for_delete'
    };
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞
const handleDeleteTicket = async (chatId, ticketId) => {
    try {
        const result = await ticketService.deleteTicket(ticketId);
        if (result) {
            await bot.sendMessage(chatId, `‚úÖ –ë–∏–ª–µ—Ç —Å ID ${ticketId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
            await showAdminTicketsMenu(chatId);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–∞:', error);
        await bot.sendMessage(chatId, `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–∏–ª–µ—Ç —Å ID ${ticketId}`);
    }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
export const handleAdminMessages = async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const userState = userStates[chatId];

    if (!userState || !userState.isAdminAction) return;

    try {
        // –°–æ–∑–¥–∞–Ω–∏–µ –±–∏–ª–µ—Ç–∞
        if (userState.step === 'creating_ticket') {
            const [title, description, event_date, event_location, price, image_url] = text.split('|').map(item => item.trim());

            if (!title || !description || !event_date || !event_location || !price || !image_url) {
                return await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
            }

            const ticketData = {
                title,
                description,
                event_date,
                event_location,
                price: parseFloat(price),
                image_url
            };

            const newTicket = await ticketService.createTicket(ticketData);
            delete userStates[chatId];

            await bot.sendMessage(chatId, `‚úÖ –ë–∏–ª–µ—Ç "${newTicket.title}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\nID: ${newTicket.id}`);
            await showAdminTicketsMenu(chatId);
        }

        // –í—ã–±–æ—Ä –±–∏–ª–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        else if (userState.step === 'selecting_ticket_for_edit') {
            const ticketId = parseInt(text);
            if (isNaN(ticketId)) {
                return await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –±–∏–ª–µ—Ç–∞');
            }

            await handleEditTicket(chatId, ticketId);
        }

        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–∞
        else if (userState.step === 'editing_ticket') {
            const [title, description, event_date, event_location, price, image_url] = text.split('|').map(item => item.trim());

            if (!title || !description || !event_date || !event_location || !price || !image_url) {
                return await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
            }

            const updateData = {
                title,
                description,
                event_date,
                event_location,
                price: parseFloat(price),
                image_url
            };

            const updatedTicket = await ticketService.updateTicket(userState.ticketId, updateData);
            delete userStates[chatId];

            await bot.sendMessage(chatId, `‚úÖ –ë–∏–ª–µ—Ç "${updatedTicket.title}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!`);
            await showAdminTicketsMenu(chatId);
        }

        // –í—ã–±–æ—Ä –±–∏–ª–µ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        else if (userState.step === 'selecting_ticket_for_delete') {
            const ticketId = parseInt(text);
            if (isNaN(ticketId)) {
                return await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –±–∏–ª–µ—Ç–∞');
            }

            await handleDeleteTicket(chatId, ticketId);
            delete userStates[chatId];
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
        await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
        delete userStates[chatId];
    }
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
export const setupAdminHandlers = () => {
    bot.on('callback_query', async (callbackQuery) => {
        const msg = callbackQuery.message;
        const chatId = msg.chat.id;
        const data = callbackQuery.data;

        try {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            switch (data) {
                case 'admin_tickets':
                    await showAdminTicketsMenu(chatId);
                    break;

                case 'admin_create_ticket':
                    await handleCreateTicket(chatId);
                    break;

                case 'admin_list_tickets':
                    await handleListTickets(chatId);
                    break;

                case 'admin_edit_ticket_select':
                    await handleSelectTicketForEdit(chatId);
                    break;

                case 'admin_delete_ticket_select':
                    await handleSelectTicketForDelete(chatId);
                    break;

                case 'back_to_main':
                    delete userStates[chatId];
                    await showMainMenu(chatId, true);
                    break;
            }

            await bot.answerCallbackQuery(callbackQuery.id);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:', error);
            await bot.answerCallbackQuery(callbackQuery.id, { text: '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', show_alert: true });
        }
    });
};