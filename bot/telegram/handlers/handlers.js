import { bot } from '../botInstance.js';
import { userStates, userCarts, eventDetailsMessages } from '../../state.js';
import {
    handleStartCommand,
    showMainMenu
} from './mainMenu.js';
import {
    showEventsList,
    handleAddToCart,
    handleQuantityChange,
    showCart,
    handleTicketMessages,
    startCheckout,
    showEventDetails,
    backToEvent
} from './event/ticketsHandler.js';
import { showContacts } from './contactsHandler.js';
import PaymentService from '../../services/paykeeper.js';
import { User } from '../../models/User.js';
import {
    handleAdminMessages,
    setupAdminHandlers,
    showAdminTicketsMenu
} from './admin/adminHandlers.js';

export const setupEventHandlers = () => {
    setupAdminHandlers();

    bot.onText(/\/start/, handleStartCommand);
    bot.onText(/\/tickets/, showEventsList);
    bot.onText(/\/cart/, showCart);

    bot.on('callback_query', async (callbackQuery) => {
        const msg = callbackQuery.message;
        if (!msg?.chat?.id) return;

        const chatId = msg.chat.id;
        const data = callbackQuery.data;
        const user = callbackQuery.from;
        const messageId = msg.message_id;

        try {
            if (!data) {
                await bot.answerCallbackQuery(callbackQuery.id);
                return;
            }

            const dbUser = await User.findOne({ where: { telegram_id: user.id } });
            const isAdmin = dbUser?.is_admin || false;

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
            if (data.startsWith('event_details_')) {
                const eventId = parseInt(data.split('_')[2]);
                await showEventDetails(chatId, eventId, messageId);
            }
            else if (data.startsWith('back_to_event_')) {
                const parts = data.split('_');
                const eventId = parseInt(parts[3]);
                const originalMessageId = parseInt(parts[4]);
                await backToEvent(chatId, eventId, originalMessageId);
            }
            else if (data.startsWith('add_to_cart_')) {
                const eventId = parseInt(data.split('_')[3]);
                await handleAddToCart(chatId, eventId);
            }
            else if (data.startsWith('increase_')) {
                const eventId = parseInt(data.split('_')[1]);
                await handleQuantityChange(chatId, eventId, 'increase');
            }
            else if (data.startsWith('decrease_')) {
                const eventId = parseInt(data.split('_')[1]);
                await handleQuantityChange(chatId, eventId, 'decrease');
            }
            else if (data === 'view_cart') {
                await showCart(chatId);
            }
            else if (data === 'checkout') {
                await startCheckout(chatId);
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
            else if (data.startsWith('check_payment_')) {
                const invoiceId = data.replace('check_payment_', '');
                
                try {
                    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∏–ª–µ—Ç–∞
                    const ticket = await TicketService.getTicketByPaymentId(invoiceId);
                    
                    if (!ticket) {
                        throw new Error('–ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    }
                    
                    // –ï—Å–ª–∏ –±–∏–ª–µ—Ç —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω
                    if (ticket.payment_status === 'cancelled') {
                        await bot.sendMessage(
                            chatId,
                            '‚åõ *–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É –∏—Å—Ç–µ–∫–ª–æ*\n\n' +
                            '–í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –±–∏–ª–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.\n' +
                            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ –∑–∞–Ω–æ–≤–æ.',
                            { parse_mode: 'Markdown' }
                        );
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
                    const isPaid = await PaymentService.checkPaymentStatus(invoiceId);
                    
                    if (isPaid) {
                        const user = await User.findOne({ where: { telegram_id: chatId } });
                        if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');

                        const result = await PaymentService.handleSuccessfulPayment(invoiceId, {
                            first_name: user.first_name,
                            last_name: user.last_name,
                            phone: user.phone,
                            email: user.email
                        });

                        if (result.success) {
                            await bot.sendMessage(
                                chatId,
                                '‚úÖ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n' +
                                '–í–∞—à–∏ –±–∏–ª–µ—Ç—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ email. ' +
                                '–ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–∏—Å—å–º–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É "–°–ø–∞–º".\n\n' +
                                '–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–≤–æ–Ω–∏—Ç–µ:\n' +
                                'üìû +7(968)090-55-50',
                                { parse_mode: 'Markdown' }
                            );
                        } else {
                            throw new Error(result.error);
                        }
                    } else {
                        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                        const createdTime = new Date(ticket.created_at).getTime();
                        const remainingTime = Math.ceil((createdTime + 5*60*1000 - Date.now()) / (60*1000));
                        
                        await bot.sendMessage(
                            chatId,
                            `‚ö†Ô∏è *–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞*\n\n` +
                            `–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å ${remainingTime} –º–∏–Ω—É—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n\n` +
                            '–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–Ω–æ–≤–∞.',
                            { parse_mode: 'Markdown' }
                        );
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
                    await bot.sendMessage(
                        chatId,
                        '‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞*\n\n' +
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n' +
                        'üìû +7(968)090-55-50',
                        { parse_mode: 'Markdown' }
                    );
                }
            }
            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            else if (data === 'contacts') {
                await showContacts(chatId);
            }
            else if (data === 'show_tickets') {
                await showEventsList(chatId);
            }
            else if (data === 'cancel_payment') {
                delete userStates[chatId];
                await bot.sendMessage(
                    chatId,
                    'üíî *–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã –Ω–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –±–∏–ª–µ—Ç!*\n\n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ? –ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å!',
                    { parse_mode: 'Markdown' }
                );
                setTimeout(() => showMainMenu(chatId, isAdmin), 3000);
            }
            else if (data === 'admin_tickets' && isAdmin) {
                await showAdminTicketsMenu(chatId);
            }
            else if (data === 'back_to_main') {
                delete userStates[chatId];
                if (eventDetailsMessages[chatId]) {
                    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
                    for (const [eventId, detailsMsgId] of Object.entries(eventDetailsMessages[chatId])) {
                        try {
                            await bot.deleteMessage(chatId, detailsMsgId);
                        } catch (e) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏:', e);
                        }
                    }
                    delete eventDetailsMessages[chatId];
                }
                await showMainMenu(chatId, isAdmin);
            }

            await bot.answerCallbackQuery(callbackQuery.id);
        } catch (error) {
            console.error('Error in callback:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    bot.on('message', async (msg) => {
        if (!msg?.chat?.id) return;

        const chatId = msg.chat.id;
        const userState = userStates[chatId];

        const dbUser = await User.findOne({ where: { telegram_id: msg.from.id } });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (userState?.isAdminAction) {
            await handleAdminMessages(msg);
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –±–∏–ª–µ—Ç–∞–º–∏
        await handleTicketMessages(msg);
    });
};