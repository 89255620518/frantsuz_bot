import EventService from '../../../services/eventsService.js';
import TicketService from '../../../services/ticketService.js';
import OrderService from '../../../services/orderService.js';
import { User } from '../../../models/User.js';
import { bot } from '../../botInstance.js';
import PaymentService from '../../../services/paykeeper.js';
import { userStates, userCarts, eventDetailsMessages, eventMessages } from '../../../state.js';

export const updateEventMessage = async (chatId, event, quantity) => {
    try {
        const messageId = eventMessages[chatId]?.[event.id];
        if (!messageId) return;

        const eventDate = new Date(event.event_date);
        const formattedDate = eventDate.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
        const formattedTime = eventDate.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });

        const caption = `üéüÔ∏è *${event.title}*\n` +
            `üìÖ ${formattedDate} –≤ ${formattedTime}\n` +
            `üìç ${event.event_location}\n` +
            `üí∞ ${event.price} —Ä—É–±.`;

        const keyboard = [
            [
                { text: '‚ûñ', callback_data: `decrease_${event.id}` },
                { text: `${quantity} —à—Ç.`, callback_data: `show_count_${event.id}` },
                { text: '‚ûï', callback_data: `increase_${event.id}` }
            ],
            [
                { text: '‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `event_details_${event.id}` },
                { text: 'üõí –í –∫–æ—Ä–∑–∏–Ω—É', callback_data: `add_to_cart_${event.id}` }
            ]
        ];

        await bot.editMessageCaption(caption, {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
};

export const showEventDetails = async (chatId, eventId, originalMessageId) => {
    try {
        const event = await EventService.getTicketById(eventId);
        if (!event) {
            return bot.sendMessage(chatId, '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        const eventDate = new Date(event.event_date);
        const formattedDate = eventDate.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
        const formattedTime = eventDate.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });

        let description = `üé≠ *${event.title}*\n\n`;
        description += `üìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* ${formattedDate} –≤ ${formattedTime}\n`;
        description += `üìç *–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:* ${event.event_location}\n`;
        description += `üí∞ *–¶–µ–Ω–∞:* ${event.price} —Ä—É–±.\n\n`;
        description += `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n${event.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n`;
        description += `‚ÑπÔ∏è *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n${event.additional_info || '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`;

        const detailsMessage = await bot.sendMessage(chatId, description, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: `back_to_event_${eventId}_${originalMessageId}` }
                    ]
                ]
            }
        });

        if (!eventDetailsMessages[chatId]) eventDetailsMessages[chatId] = {};
        eventDetailsMessages[chatId][eventId] = detailsMessage.message_id;

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    }
};

export const backToEvent = async (chatId, eventId, originalMessageId) => {
    try {
        if (eventDetailsMessages[chatId]?.[eventId]) {
            try {
                await bot.deleteMessage(chatId, eventDetailsMessages[chatId][eventId]);
                delete eventDetailsMessages[chatId][eventId];
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏:', e);
            }
        }

        const event = await EventService.getTicketById(eventId);
        if (!event) return;

        const cart = userCarts[chatId] || [];
        const cartItem = cart.find(item => item.eventId === eventId);
        const quantity = cartItem ? cartItem.quantity : 0;

        try {
            await bot.deleteMessage(chatId, originalMessageId);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', e);
        }

        await sendEventMessage(chatId, event, quantity);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
};

export const handleEventCallbacks = async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const data = callbackQuery.data;

    try {
        if (data.startsWith('event_details_')) {
            const eventId = data.split('_')[2];
            await showEventDetails(chatId, eventId, messageId);
            await bot.answerCallbackQuery(callbackQuery.id);
        }
        else if (data.startsWith('back_to_event_')) {
            const parts = data.split('_');
            const eventId = parts[3];
            const originalMessageId = parts[4];
            await backToEvent(chatId, eventId, originalMessageId);
            await bot.answerCallbackQuery(callbackQuery.id);
        }
        else if (data.startsWith('add_to_cart_')) {
            const eventId = data.split('_')[3];
            await handleAddToCart(chatId, eventId);
            await bot.answerCallbackQuery(callbackQuery.id, { text: '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É' });
        }
        else if (data.startsWith('increase_')) {
            const eventId = data.split('_')[1];
            await handleQuantityChange(chatId, eventId, 'increase');
            await bot.answerCallbackQuery(callbackQuery.id);
        }
        else if (data.startsWith('decrease_')) {
            const eventId = data.split('_')[1];
            await handleQuantityChange(chatId, eventId, 'decrease');
            await bot.answerCallbackQuery(callbackQuery.id);
        }
        else if (data === 'view_cart') {
            await showCart(chatId);
            await bot.answerCallbackQuery(callbackQuery.id);
        }
        else if (data === 'checkout') {
            await startCheckout(chatId);
            await bot.answerCallbackQuery(callbackQuery.id);
        }
        else if (data === 'show_events') {
            await showEventsList(chatId);
            await bot.answerCallbackQuery(callbackQuery.id);
        }
        else if (data === 'clear_cart') {
            await clearCart(chatId);
            await bot.answerCallbackQuery(callbackQuery.id, { text: '–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞' });
        }
        else if (data === 'edit_cart') {
            await showEditableCart(chatId);
            await bot.answerCallbackQuery(callbackQuery.id);
        }
        else if (data.startsWith('remove_from_cart_')) {
            const eventId = data.split('_')[3];
            await handleRemoveFromCart(chatId, eventId);
            await bot.answerCallbackQuery(callbackQuery.id, { text: '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã' });
        }
        else if (data.startsWith('check_payment_')) {
            const paymentId = data.split('_')[2];
            const isPaid = await PaymentService.checkPaymentStatus(paymentId);

            if (isPaid) {
                const userState = userStates[chatId];
                if (userState) {
                    const result = await PaymentService.handleSuccessfulPayment(
                        paymentId,
                        {
                            first_name: userState.first_name,
                            last_name: userState.last_name,
                            phone: userState.phone,
                            email: userState.email
                        }
                    );

                    if (result.success) {
                        await bot.answerCallbackQuery(callbackQuery.id, {
                            text: '‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ë–∏–ª–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à email.'
                        });
                        await bot.editMessageReplyMarkup(
                            { inline_keyboard: [[]] },
                            {
                                chat_id: chatId,
                                message_id: messageId
                            }
                        );
                    } else {
                        await bot.answerCallbackQuery(callbackQuery.id, {
                            text: '–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–∏–ª–µ—Ç–æ–≤.'
                        });
                    }
                }
            } else {
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
                });
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback:', error);
        await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
};

export const handleAddToCart = async (chatId, eventId) => {
    try {
        const event = await EventService.getTicketById(eventId);
        if (!event) {
            return bot.sendMessage(chatId, '‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        }

        const user = await User.findOne({ where: { telegram_id: chatId } });
        if (!user) {
            return bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.');
        }

        const userTicket = await TicketService.createPendingTicket(chatId, eventId);

        if (!userCarts[chatId]) {
            userCarts[chatId] = [];
        }

        let cartItem = userCarts[chatId].find(item => item.eventId === event.id);

        if (cartItem) {
            cartItem.quantity += 1;
            cartItem.ticketIds.push(userTicket.id);
        } else {
            cartItem = {
                eventId: event.id,
                title: event.title,
                price: event.price,
                quantity: 1,
                image: event.image_url,
                event_date: event.event_date,
                event_location: event.event_location,
                ticketIds: [userTicket.id]
            };
            userCarts[chatId].push(cartItem);
        }

        await updateEventMessage(chatId, event, cartItem.quantity);
        await showMiniCart(chatId);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

export const handleQuantityChange = async (chatId, eventId, action) => {
    try {
        const event = await EventService.getTicketById(eventId);
        if (!event) {
            return bot.sendMessage(chatId, '‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        }

        const cart = userCarts[chatId] || [];
        const cartItemIndex = cart.findIndex(item => item.eventId === eventId);
        
        if (cartItemIndex === -1) return;

        const cartItem = cart[cartItemIndex];
        let newQuantity = cartItem.quantity;
        let shouldRemoveFromCart = false;

        if (action === 'increase') {
            const user = await User.findOne({ where: { telegram_id: chatId } });
            if (!user) {
                return bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
            }

            const userTicket = await TicketService.createPendingTicket(chatId, eventId);
            cartItem.quantity += 1;
            cartItem.ticketIds.push(userTicket.id);
            newQuantity = cartItem.quantity;
        } else if (action === 'decrease') {
            if (cartItem.quantity > 1) {
                cartItem.quantity -= 1;
                const ticketId = cartItem.ticketIds.pop();
                await TicketService.cancelPendingTicket(ticketId);
                newQuantity = cartItem.quantity;
            } else {
                // –£–¥–∞–ª—è–µ–º –±–∏–ª–µ—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–ª–æ 0
                for (const ticketId of cartItem.ticketIds) {
                    await TicketService.cancelPendingTicket(ticketId).catch(console.error);
                }
                cart.splice(cartItemIndex, 1); // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
                shouldRemoveFromCart = true;
                newQuantity = 0;
                
                // –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                if (cart.length === 0) {
                    delete userCarts[chatId];
                }
            }
        }

        if (shouldRemoveFromCart) {
            // –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º –±–∏–ª–µ—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            await sendEventMessage(chatId, event, 0);
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            await updateEventMessage(chatId, event, newQuantity);
        }

        await showMiniCart(chatId);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

export const showMiniCart = async (chatId) => {
    const cart = userCarts[chatId];
    if (!cart || cart.length === 0) return;

    const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
    const totalAmount = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);

    let message = `üõí *–¢–µ–∫—É—â–∞—è –∫–æ—Ä–∑–∏–Ω–∞*\n`;
    message += `üéüÔ∏è –ë–∏–ª–µ—Ç–æ–≤: ${totalItems}\n`;
    message += `üí∞ –°—É–º–º–∞: ${totalAmount} —Ä—É–±.\n\n`;
    message += `üìù –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"`;

    await bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üõí –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'view_cart' },
                    { text: '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'checkout' }
                ],
                [
                    { text: 'üîô –ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º', callback_data: 'show_tickets' }
                ]
            ]
        }
    });
};

export const showCart = async (chatId) => {
    try {
        const cart = userCarts[chatId];
        if (!cart || cart.length === 0) {
            return bot.sendMessage(chatId, 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.');
        }

        let message = 'üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞*\n\n';
        let totalAmount = 0;

        cart.forEach((item, index) => {
            totalAmount += item.price * item.quantity;
            message += `üé≠ *${item.title}*\n` +
                `üìÖ ${new Date(item.event_date).toLocaleDateString('ru-RU')}\n` +
                `üìç ${item.event_location}\n` +
                `üí∞ ${item.price} —Ä—É–±. x ${item.quantity} = ${item.price * item.quantity} —Ä—É–±.\n\n`;
        });

        message += `üíµ *–ò—Ç–æ–≥–æ: ${totalAmount} —Ä—É–±.*`;

        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'checkout' },
                        { text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', callback_data: 'edit_cart' }
                    ],
                    [
                        { text: '‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'clear_cart' },
                        { text: 'üîô –ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º', callback_data: 'show_tickets' }
                    ]
                ]
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã.');
    }
};

export const clearCart = async (chatId) => {
    try {
        const cart = userCarts[chatId];
        if (!cart || cart.length === 0) {
            return bot.sendMessage(chatId, 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞.');
        }

        for (const item of cart) {
            for (const ticketId of item.ticketIds) {
                await TicketService.cancelPendingTicket(ticketId);
            }
        }

        delete userCarts[chatId];
        await bot.sendMessage(chatId, 'üõí –ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.');
        await showEventsList(chatId);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã.');
    }
};

export const showEditableCart = async (chatId) => {
    try {
        const cart = userCarts[chatId];
        if (!cart || cart.length === 0) {
            return bot.sendMessage(chatId, 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.');
        }

        let message = 'üõí *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã*\n\n';
        let totalAmount = 0;

        cart.forEach((item) => {
            totalAmount += item.price * item.quantity;
            message += `üé≠ *${item.title}*\n` +
                `üìÖ ${new Date(item.event_date).toLocaleDateString('ru-RU')}\n` +
                `üìç ${item.event_location}\n` +
                `üí∞ ${item.price} —Ä—É–±. x ${item.quantity} = ${item.price * item.quantity} —Ä—É–±.\n\n`;
        });

        message += `üíµ *–ò—Ç–æ–≥–æ: ${totalAmount} —Ä—É–±.*`;

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä–∑–∏–Ω—ã
        const itemButtons = cart.map(item => [
            { 
                text: `‚ûñ ${item.title}`, 
                callback_data: `decrease_${item.eventId}` 
            },
            { 
                text: `‚ûï ${item.title}`, 
                callback_data: `increase_${item.eventId}` 
            },
            { 
                text: `‚ùå –£–¥–∞–ª–∏—Ç—å ${item.title}`, 
                callback_data: `remove_from_cart_${item.eventId}` 
            }
        ]);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
        const keyboard = [
            ...itemButtons,
            [
                { text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'view_cart' },
                { text: '‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'clear_cart' }
            ],
            [
                { text: 'üîô –ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º', callback_data: 'show_tickets' }
            ]
        ];

        await bot.sendMessage(chatId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: keyboard
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∫–æ—Ä–∑–∏–Ω—ã:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã.');
    }
};

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
export const handleRemoveFromCart = async (chatId, eventId) => {
    try {
        const event = await EventService.getTicketById(eventId);
        if (!event) {
            return bot.sendMessage(chatId, '‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        }

        const cart = userCarts[chatId] || [];
        const cartItemIndex = cart.findIndex(item => item.eventId === eventId);
        
        if (cartItemIndex === -1) return;

        const cartItem = cart[cartItemIndex];

        // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –±–∏–ª–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        for (const ticketId of cartItem.ticketIds) {
            await TicketService.cancelPendingTicket(ticketId).catch(console.error);
        }

        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        cart.splice(cartItemIndex, 1);
        
        // –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, —É–¥–∞–ª—è–µ–º –µ—ë
        if (cart.length === 0) {
            delete userCarts[chatId];
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        await sendEventMessage(chatId, event, 0);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
        if (cart.length > 0) {
            await showEditableCart(chatId);
        } else {
            await bot.sendMessage(chatId, 'üõí –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã. –ö–æ—Ä–∑–∏–Ω–∞ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–∞.');
            await showEventsList(chatId);
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

export const startCheckout = async (chatId) => {
    try {
        const cart = userCarts[chatId];
        if (!cart || cart.length === 0) {
            return bot.sendMessage(chatId, 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.');
        }

        const user = await User.findOne({ where: { telegram_id: chatId } });
        if (!user) {
            return bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.');
        }

        userStates[chatId] = {
            step: 'first_name',
            cartItems: cart,
            dbUserId: user.id
        };

        await bot.sendMessage(chatId, '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:', {
            reply_markup: { force_reply: true }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

export const completeCheckout = async (chatId, userData) => {
    try {
        const { first_name, last_name, phone, email, cartItems } = userData;

        if (!first_name || !last_name || !phone || !email || !cartItems?.length) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è');
        }

        const user = await User.findOne({ where: { telegram_id: chatId } });
        if (!user) throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        await user.update({ first_name, last_name, phone, email });

        const totalAmount = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);

        const paymentResult = await PaymentService.createInvoice({
            id: cartItems[0].ticketIds[0],
            userId: chatId,
            eventId: cartItems[0].eventId,
            price: totalAmount,
            customer: { first_name, last_name, phone, email },
            event: {
                title: cartItems[0].title,
                date: cartItems[0].event_date,
                location: cartItems[0].event_location
            }
        });

        if (!paymentResult.success) {
            throw new Error(paymentResult.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞');
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –±–∏–ª–µ—Ç—ã —Å paymentId
        for (const item of cartItems) {
            for (const ticketId of item.ticketIds) {
                await TicketService.updatePaymentId(ticketId, paymentResult.paymentId);
            }
        }

        const order = await OrderService.createOrder(
            { telegram_id: chatId, first_name, last_name, phone, email },
            cartItems.map(item => ({
                id: item.ticketIds[0],
                price: item.price,
                quantity: item.quantity,
                event: {
                    title: item.title,
                    event_date: item.event_date,
                    event_location: item.event_location
                }
            })),
            {
                id: paymentResult.paymentId,
                method: 'paykeeper'
            }
        );

        delete userCarts[chatId];
        delete userStates[chatId];

        await bot.sendMessage(
            chatId,
            `‚úÖ *–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!*\n\n` +
            `üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${order.id}\n` +
            `üí∞ –°—É–º–º–∞: ${totalAmount} —Ä—É–±.\n` +
            `üìß –ë–∏–ª–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞: ${email}\n\n` +
            `–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`,
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: paymentResult.paymentUrl }],
                        [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data: `check_payment_${paymentResult.paymentId}` }]
                    ]
                }
            }
        );

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);

        if (userData?.cartItems) {
            for (const item of userData.cartItems) {
                for (const ticketId of item.ticketIds) {
                    await TicketService.cancelPendingTicket(ticketId).catch(console.error);
                }
            }
        }

        await bot.sendMessage(
            chatId,
            '‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞*\n\n' +
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n' +
            'üìû +7(968)090-55-50',
            { parse_mode: 'Markdown' }
        );
    }
};

export const sendEventMessage = async (chatId, event, quantity = 0) => {
    const eventDate = new Date(event.event_date);
    const formattedDate = eventDate.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
    });
    const formattedTime = eventDate.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
    });

    const caption = `üéüÔ∏è *${event.title}*\n` +
        `üìÖ ${formattedDate} –≤ ${formattedTime}\n` +
        `üìç ${event.event_location}\n` +
        `üí∞ ${event.price} —Ä—É–±.`;

    const keyboard = quantity > 0 ? [
        [
            { text: '‚ûñ', callback_data: `decrease_${event.id}` },
            { text: `${quantity} —à—Ç.`, callback_data: `show_count_${event.id}` },
            { text: '‚ûï', callback_data: `increase_${event.id}` }
        ],
        [
            { text: '‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `event_details_${event.id}` },
            { text: 'üõí –í –∫–æ—Ä–∑–∏–Ω—É', callback_data: `add_to_cart_${event.id}` }
        ]
    ] : [
        [
            { text: 'üõí –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç', callback_data: `add_to_cart_${event.id}` },
            { text: '‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `event_details_${event.id}` }
        ]
    ];

    try {
        const message = await bot.sendPhoto(chatId, event.image_url || 'https://via.placeholder.com/500', {
            caption: caption,
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        });

        if (!eventMessages[chatId]) eventMessages[chatId] = {};
        eventMessages[chatId][event.id] = message.message_id;

        return message;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        throw error;
    }
};

export const showEventsList = async (chatId) => {
    try {
        const events = await EventService.getAllTickets();

        if (!events?.length) {
            return bot.sendMessage(chatId, 'üé≠ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!');
        }

        const cart = userCarts[chatId] || [];
        const cartItemsCount = cart.reduce((sum, item) => sum + item.quantity, 0);

        if (eventMessages[chatId]) {
            for (const [eventId, msgId] of Object.entries(eventMessages[chatId])) {
                try {
                    await bot.deleteMessage(chatId, msgId);
                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', e.message);
                }
            }
            delete eventMessages[chatId];
        }

        await bot.sendMessage(chatId, 'üéüÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', {
            reply_markup: {
                inline_keyboard: [
                    cartItemsCount > 0 ? [
                        { text: `üõí –ö–æ—Ä–∑–∏–Ω–∞ (${cartItemsCount})`, callback_data: 'view_cart' },
                        { text: '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'checkout' }
                    ] : []
                ]
            }
        });

        for (const event of events) {
            const cartItem = cart.find(item => item.eventId === event.id);
            const quantity = cartItem ? cartItem.quantity : 0;
            await sendEventMessage(chatId, event, quantity);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

export const handleTicketMessages = async (msg) => {
    const chatId = msg.chat.id;
    const userState = userStates[chatId];

    if (!msg.text || msg.text.startsWith('/') || !userState) return;

    try {
        if (userState.step === 'first_name') {
            if (msg.text.trim().length < 2) {
                return bot.sendMessage(chatId, '‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
            }

            userState.first_name = msg.text.trim();
            userState.step = 'last_name';
            await bot.sendMessage(chatId, '‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:', {
                reply_markup: { force_reply: true }
            });
        }
        else if (userState.step === 'last_name') {
            if (msg.text.trim().length < 2) {
                return bot.sendMessage(chatId, '‚ùå –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
            }

            userState.last_name = msg.text.trim();
            userState.step = 'phone';
            await bot.sendMessage(chatId, 'üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:', {
                reply_markup: { force_reply: true }
            });
        }
        else if (userState.step === 'phone') {
            const phoneRegex = /^(\+7|8)[0-9]{10}$/;
            const cleanPhone = msg.text.replace(/[^\d+]/g, '');

            if (!phoneRegex.test(cleanPhone)) {
                return bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX');
            }

            userState.phone = cleanPhone;
            userState.step = 'email';
            await bot.sendMessage(chatId, 'üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email (–Ω–∞ –Ω–µ–≥–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–∏–ª–µ—Ç):', {
                reply_markup: { force_reply: true }
            });
        }
        else if (userState.step === 'email') {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(msg.text)) {
                return bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
            }

            userState.email = msg.text;
            await completeCheckout(chatId, userState);
        }
    } catch (error) {
        console.error('Error in message handler:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};