import EventService from '../../../services/eventsService.js';

export const showEventsList = async (chatId) => {
    const events = await EventService.getAllEvents();

    if (!events?.length) {
        return bot.sendMessage(chatId, 'üé≠ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!');
    }

    const cart = userCarts[chatId];
    const cartButton = cart?.length ? [{ text: `üõí –ö–æ—Ä–∑–∏–Ω–∞ (${cart.reduce((sum, item) => sum + item.quantity, 0)})`, callback_data: 'view_cart' }] : [];

    await bot.sendMessage(chatId, 'üéüÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', {
        reply_markup: {
            inline_keyboard: [cartButton]
        }
    });

    for (const event of events) {
        const caption = `üéüÔ∏è *${event.title}*\nüìÖ ${event.event_date.toLocaleDateString()} –≤ ${event.event_date.toLocaleTimeString()}\nüìç ${event.event_location}\nüí∞ ${event.price} —Ä—É–±.\n\n${event.description || ''}`;

        await bot.sendPhoto(chatId, event.image_url || 'https://via.placeholder.com/500', {
            caption,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data: `add_to_cart_${event.id}` }]
                ]
            }
        });
    }
};

export const handleAddToCart = async (chatId, eventId) => {
    try {
        const event = await EventService.getEventById(eventId);
        if (!event) {
            return bot.sendMessage(chatId, '‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–ª–µ—Ç–æ–≤
        const canAdd = await EventService.checkTicketsAvailability(eventId, 1);
        if (!canAdd) {
            return bot.sendMessage(chatId, '‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–∏–ª–µ—Ç—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.');
        }

        if (!userCarts[chatId]) {
            userCarts[chatId] = [];
        }

        const existingItem = userCarts[chatId].find(item => item.eventId == eventId);
        if (existingItem) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            const canIncrease = await EventService.checkTicketsAvailability(eventId, existingItem.quantity + 1);
            if (!canIncrease) {
                return bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.');
            }
            existingItem.quantity += 1;
        } else {
            userCarts[chatId].push({
                eventId,
                title: event.title,
                price: event.price,
                quantity: 1,
                image: event.image_url,
                event_date: event.event_date,
                event_location: event.event_location
            });
        }

        await bot.sendMessage(chatId, `‚úÖ "${event.title}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'view_cart' }],
                    [{ text: 'üéüÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏', callback_data: 'show_tickets' }]
                ]
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

export const completeTicketPurchase = async (chatId, userState) => {
    try {
        const user = await User.findOne({ where: { telegram_id: userState.dbUserId } });
        if (!user) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        await user.update({
            phone: userState.phone,
            email: userState.email
        });

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤
        const ticketsToCreate = [];
        let totalAmount = 0;

        for (const item of userState.cartItems) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π
            const available = await EventService.checkTicketsAvailability(item.eventId, item.quantity);
            if (!available) {
                throw new Error(`–ë–∏–ª–µ—Ç—ã –Ω–∞ "${item.title}" –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã`);
            }

            for (let i = 0; i < item.quantity; i++) {
                ticketsToCreate.push({
                    title: item.title,
                    description: `–ë–∏–ª–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ${item.title}`,
                    image_url: item.image,
                    event_date: item.event_date,
                    event_location: item.event_location,
                    price: item.price,
                    ticket_number: EventService.generateTicketNumber(),
                    is_used: false,
                    user_id: user.id,
                    event_id: item.eventId
                });
            }
            totalAmount += item.price * item.quantity;
        }

        await bot.sendMessage(
            chatId,
            'üîÑ *–û—Ñ–æ—Ä–º–ª—è–µ–º –≤–∞—à –∑–∞–∫–∞–∑...*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.',
            { parse_mode: 'Markdown' }
        );

        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        const paymentResult = await processPayment(bot, chatId, {
            customer: {
                name: userState.name,
                phone: userState.phone,
                email: userState.email
            },
            tickets: ticketsToCreate,
            totalAmount
        });

        if (!paymentResult.success) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
        }

        // –°–æ–∑–¥–∞–µ–º –±–∏–ª–µ—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await EventService.createTickets(ticketsToCreate);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await bot.sendMessage(
            chatId,
            `üéâ *–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!*\n\n` +
            `–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${paymentResult.invoiceId}\n` +
            `–°—É–º–º–∞: ${totalAmount} —Ä—É–±.\n\n` +
            `–ë–∏–ª–µ—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ email: ${userState.email}`,
            { parse_mode: 'Markdown' }
        );

        // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        delete userCarts[chatId];

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        await bot.sendMessage(
            chatId,
            `‚ùå *–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞*\n\n${error.message}\n\n` +
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`,
            { parse_mode: 'Markdown' }
        );
    } finally {
        delete userStates[chatId];
    }
};