import { bot } from '../../botInstance.js';
import { Ticket } from '../../../models/Event.js';
import { UserTicket } from '../../../models/UserTicket.js';
import nodemailer from 'nodemailer';

const transporter = nodemailer.createTransport({
    host: 'smtp.beget.com',
    port: 465,
    secure: true,
    auth: {
        user: 'ibra001@ibrokhim.ru',
        pass: 'Restart%1996'
    }
});

const ADMIN_EMAIL = 'ibra001@ibrokhim.ru';

export class AdminNotificationsHandler {
    constructor() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º setupAdminHandlers
    }

    async showRefundTypeSelection(chatId) {
        await bot.sendMessage(
            chatId,
            'üì¢ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*',
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '–û—Ç–º–µ–Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', callback_data: 'refund_type_cancel' },
                            { text: '–ü–µ—Ä–µ–Ω–æ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', callback_data: 'refund_type_reschedule' }
                        ],
                        [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_command_menu' }]
                    ]
                }
            }
        );
    }

    async showAllEventsForRefund(chatId, refundType) {
        try {
            const events = await Ticket.findAll({
                include: [{
                    model: UserTicket,
                    as: 'user_tickets',
                    where: { 
                        payment_status: 'paid'
                    },
                    required: true
                }],
                order: [['event_date', 'DESC']]
            });

            if (!events.length) {
                return await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ –±–∏–ª–µ—Ç–∞–º–∏', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_refund' }]
                        ]
                    }
                });
            }

            const actionText = refundType === 'cancel' ? '–æ—Ç–º–µ–Ω—ã' : '–ø–µ—Ä–µ–Ω–æ—Å–∞';

            const eventButtons = events.map(event => [
                {
                    text: `${event.title} (${event.user_tickets.length} –±–∏–ª–µ—Ç–æ–≤)`,
                    callback_data: `full_refund_event_${event.id}_${refundType}`
                }
            ]);

            eventButtons.push([{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_refund' }]);

            await bot.sendMessage(
                chatId,
                `üé™ *–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è ${actionText}:*\n\n` +
                `‚ÑπÔ∏è –ë—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º`,
                {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: eventButtons
                    }
                }
            );

        } catch (error) {
            console.error('Error showing events for refund:', error);
            await bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π');
        }
    }

    async confirmFullRefund(chatId, eventId, refundType, messageId) {
        try {
            const event = await Ticket.findByPk(eventId, {
                include: [{
                    model: UserTicket,
                    as: 'user_tickets',
                    where: { 
                        payment_status: 'paid'
                    },
                    include: [{
                        association: 'order_item',
                        required: true,
                        include: [{
                            association: 'order',
                            required: true
                        }]
                    }]
                }]
            });

            if (!event) {
                return await bot.sendMessage(chatId, '‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤ –∏ —Å—É–º–º—É
            let totalTickets = 0;
            let totalAmount = 0;
            
            event.user_tickets.forEach(ticket => {
                const quantity = ticket.order_item.quantity || 1;
                totalTickets += quantity;
                totalAmount += parseFloat(event.price) * quantity;
            });

            const actionText = refundType === 'cancel' ? '–û–¢–ú–ï–ù–´' : '–ü–ï–†–ï–ù–û–°–ê';
            const actionDescription = refundType === 'cancel' ? '–æ—Ç–º–µ–Ω–µ–Ω–æ' : '–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ';

            const ticketPrice = parseFloat(event.price).toFixed(2);
            const formattedTotalAmount = totalAmount.toFixed(2);
            
            const eventDate = new Date(event.event_date);
            const isPastEvent = eventDate < new Date();

            await bot.editMessageText(
                `‚ö†Ô∏è *–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï ${actionText} –ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø* ‚ö†Ô∏è\n\n` +
                `üìå *${event.title}*\n` +
                `üìÖ –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${eventDate.toLocaleString()}\n` +
                `üé´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤: ${totalTickets}\n` +
                `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞: ${ticketPrice} ‚ÇΩ\n` +
                `üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${formattedTotalAmount} ‚ÇΩ\n` +
                `üìå –°—Ç–∞—Ç—É—Å: ${isPastEvent ? 'üî¥ –ü—Ä–æ—à–µ–¥—à–µ–µ' : 'üü¢ –ë—É–¥—É—â–µ–µ'}\n\n` +
                `*–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å! –í—Å–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ${actionDescription}.*`,
                {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { 
                                    text: `‚úÖ –ü–û–î–¢–í–ï–†–î–ò–¢–¨ ${actionText}`, 
                                    callback_data: `confirm_full_refund_${eventId}_${refundType}`
                                }
                            ],
                            [
                                { 
                                    text: '‚ùå –û–¢–ú–ï–ù–ê', 
                                    callback_data: 'cancel_full_refund'
                                }
                            ]
                        ]
                    }
                }
            );

        } catch (error) {
            console.error('Confirm refund error:', error);
            await bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏');
        }
    }

    async processFullRefund(chatId, eventId, refundType, messageId) {
        try {
            const actionText = refundType === 'cancel' ? '–æ—Ç–º–µ–Ω—ã' : '–ø–µ—Ä–µ–Ω–æ—Å–∞';
            
            await bot.editMessageText(`üîÑ *–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ ${actionText} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è...*`, {
                chat_id: chatId,
                message_id: messageId,
                parse_mode: 'Markdown',
                reply_markup: { inline_keyboard: [] }
            });

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–∏–ª–µ—Ç—ã —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
            const tickets = await UserTicket.findAll({
                where: {
                    ticket_id: eventId,
                    payment_status: 'paid'
                },
                include: [
                    {
                        association: 'ticket',
                        attributes: ['title', 'event_date', 'price']
                    },
                    {
                        association: 'order_item',
                        required: true,
                        include: [{
                            association: 'order',
                            required: true
                        }]
                    }
                ]
            });

            if (!tickets.length) {
                return await bot.editMessageText(
                    '‚ùå –ù–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ',
                    {
                        chat_id: chatId,
                        message_id: messageId,
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '‚óÄÔ∏è –í –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–æ–≤', callback_data: 'admin_refund' }]
                            ]
                        }
                    }
                );
            }

            const event = tickets[0].ticket;
            const eventDate = new Date(event.event_date);
            const formattedDate = eventDate.toLocaleString('ru-RU');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const results = await Promise.all(
                tickets.map(ticket => this.sendRefundNotification(ticket, event, refundType))
            );

            console.log(results, 'res')

            const successCount = results.filter(r => r.success).length;
            const failedCount = results.length - successCount;

            // –§–æ—Ä–º–∏—Ä—É–µ–º email –æ—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            let totalRefundAmount = 0;
            let adminEmailSubject = `–û—Ç—á–µ—Ç –æ –≤–æ–∑–≤—Ä–∞—Ç–µ: ${event.title}`;
            let adminEmailText = `–î–µ—Ç–∞–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤\n\n` +
                            `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${event.title}\n` +
                            `–î–∞—Ç–∞: ${formattedDate}\n\n` +
                            `–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:\n\n`;

            results.forEach(result => {
                if (result.success) {
                    adminEmailText += `–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${result.customerName}\n` +
                                `–ë–∏–ª–µ—Ç–æ–≤: ${result.ticketCount}\n` +
                                `–ù–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤: ${result.ticketNumbers}\n` +
                                `–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞: ${event.price} ‚ÇΩ\n` +
                                `–°—É–º–º–∞: ${result.amount} ‚ÇΩ\n` +
                                `Email: ${result.email}\n` +
                                `–¢–µ–ª–µ—Ñ–æ–Ω: ${result.phone}\n\n`;
                                totalRefundAmount += parseFloat(result.amount) || 0;
                }
            });

            adminEmailText += `–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n` +
                        `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: ${failedCount}\n` +
                        `–û–±—â–∞—è —Å—É–º–º–∞ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É: ${totalRefundAmount.toFixed(2)} ‚ÇΩ`;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await this.sendEmail(ADMIN_EMAIL, adminEmailSubject, adminEmailText);

            await bot.editMessageText(
                `‚úÖ *–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û ${actionText.toUpperCase()} –£–°–ü–ï–®–ù–û –û–¢–ü–†–ê–í–õ–ï–ù–´*\n\n` +
                `üìå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ${event.title}\n` +
                `üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${successCount}\n` +
                `üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É: ${totalRefundAmount.toFixed(2)} ‚ÇΩ\n\n` +
                `–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –≤–æ–∑–≤—Ä–∞—Ç–∞.`,
                {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è –í –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–æ–≤', callback_data: 'admin_refund' }]
                        ]
                    }
                }
            );

        } catch (error) {
            console.error('Process refund error:', error);
            await bot.editMessageText(
                '‚ö†Ô∏è *–û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô*\n\n' +
                '–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã.\n\n' +
                `–û—à–∏–±–∫–∞: ${error.message}`,
                {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚óÄÔ∏è –í –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–æ–≤', callback_data: 'admin_refund' }]
                        ]
                    }
                }
            );
        }
    }

    async sendRefundNotification(userTicket, event, refundType) {
        try {
            if (!userTicket.order_item || !userTicket.order_item.order) {
                throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –±–∏–ª–µ—Ç–∞ ${userTicket.ticket_number}`);
            }

            const order = userTicket.order_item.order;
            const quantity = userTicket.order_item.quantity || 1;
            const ticketPrice = parseFloat(event.price).toFixed(2);
            const totalAmount = (parseFloat(event.price) * quantity).toFixed(2);
            
            if (!order.first_name || !order.last_name || !order.email || !order.phone) {
                throw new Error(`–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –±–∏–ª–µ—Ç–∞ ${userTicket.ticket_number}`);
            }

            const allTickets = await UserTicket.findAll({
                include: [{
                    association: 'order_item',
                    where: {
                        order_id: order.id
                    },
                    required: true
                }],
                where: {
                    payment_status: 'paid'
                },
                attributes: ['ticket_number']
            });

            const allTicketNumbers = allTickets.map(t => t.ticket_number).join(', ');

            const eventDate = new Date(event.event_date);
            const formattedDate = eventDate.toLocaleString('ru-RU');

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            let emailSubject, emailText, telegramText;

            if (refundType === 'cancel') {
                emailSubject = `–û—Ç–º–µ–Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "${event.title}"`;
                emailText = `–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) ${order.last_name} ${order.first_name},\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}", –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ ${formattedDate}, –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n–î–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:\n- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤: ${quantity}\n- –ù–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤: ${allTicketNumbers}\n- –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞: ${ticketPrice} ‚ÇΩ\n- –û–±—â–∞—è —Å—É–º–º–∞ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É: ${totalAmount} ‚ÇΩ\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞:\n1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ\n2. –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞\n3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤: ${allTicketNumbers}\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å "–§—Ä–∞–Ω—Ü—É–∑"`;
                
                telegramText = `üî¥ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è*\n\n` +
                               `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}" (${formattedDate}) –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n` +
                               `–í–∞—à–∏ –±–∏–ª–µ—Ç—ã:\n` +
                               `üé´ –ù–æ–º–µ—Ä–∞: ${allTicketNumbers}\n` +
                               `üí∞ –°—É–º–º–∞ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É: ${totalAmount} ‚ÇΩ\n\n` +
                               `–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã.`;
            } else {
                emailSubject = `–ü–µ—Ä–µ–Ω–æ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "${event.title}"`;
                emailText = `–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) ${order.last_name} ${order.first_name},\n\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}", –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ ${formattedDate}, –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ.\n\n–î–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:\n- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤: ${quantity}\n- –ù–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤: ${allTicketNumbers}\n- –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞: ${ticketPrice} ‚ÇΩ\n- –û–±—â–∞—è —Å—É–º–º–∞ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É: ${totalAmount} ‚ÇΩ\n\n–í—ã –º–æ–∂–µ—Ç–µ:\n1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∏–ª–µ—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –¥–∞—Ç—ã\n2. –ò–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤\n\n–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:\n1. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ\n2. –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã\n3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤: ${allTicketNumbers}\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å "–§—Ä–∞–Ω—Ü—É–∑"`;
                
                telegramText = `üü° *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è*\n\n` +
                               `–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${event.title}" (${formattedDate}) –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ.\n\n` +
                               `–í–∞—à–∏ –±–∏–ª–µ—Ç—ã:\n` +
                               `üé´ –ù–æ–º–µ—Ä–∞: ${allTicketNumbers}\n` +
                               `üí∞ –°—É–º–º–∞ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É: ${totalAmount} ‚ÇΩ\n\n` +
                               `–í—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∏–ª–µ—Ç—ã –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É ${ADMIN_EMAIL} —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –∏ –Ω–æ–º–µ—Ä–∞ –±–∏–ª–µ—Ç–æ–≤.`;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            await this.sendEmail(order.email, emailSubject, emailText);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ SMS
            try {
                await bot.sendMessage(
                    order.user_id, // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ user_id —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –∑–∞–∫–∞–∑–µ
                    telegramText,
                    { parse_mode: 'Markdown' }
                );
            } catch (tgError) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', tgError);
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è Telegram
                await this.sendEmail(
                    order.email, 
                    emailSubject, 
                    emailText + `\n\nTelegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n${telegramText.replace(/\*/g, '')}`
                );
            }

            return { 
                success: true,
                customerName: `${order.last_name} ${order.first_name}`,
                ticketCount: quantity,
                amount: totalAmount,
                email: order.email,
                phone: order.phone,
                ticketNumbers: allTicketNumbers
            };

        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –±–∏–ª–µ—Ç–∞ ${userTicket.ticket_number}:`, error);
            return {
                success: false,
                error: error.message,
                ticketNumber: userTicket.ticket_number
            };
        }
    }

    async sendEmail(to, subject, text) {
        try {
            const mailOptions = {
                from: 'ibra001@ibrokhim.ru',
                to,
                subject,
                text,
                replyTo: ADMIN_EMAIL
            };

            await transporter.sendMail(mailOptions);
            return true;
        } catch (error) {
            console.error('Error sending email:', error);
            throw error;
        }
    }
}

export const adminNotificationsHandler = new AdminNotificationsHandler();