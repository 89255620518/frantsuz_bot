export class AdminEventManager {
    constructor(bot, ticketService, userStates) {
        this.bot = bot;
        this.ticketService = ticketService;
        this.userStates = userStates;
        this.editSteps = {
            TITLE: 'edit_title',
            DESCRIPTION: 'edit_description',
            DATE: 'edit_date',
            LOCATION: 'edit_location',
            PRICE: 'edit_price',
            IMAGE: 'edit_image',
            CONFIRM: 'edit_confirm'
        };
    }

    async showMenu(chatId) {
        await this.bot.sendMessage(chatId, 'üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞–º–∏:', {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚ûï –°–æ–∑–¥–∞—Ç—å –±–∏–ª–µ—Ç', callback_data: 'admin_create_ticket' },
                        { text: 'üìã –°–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤', callback_data: 'admin_list_tickets' }
                    ],
                    [
                        { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç', callback_data: 'admin_edit_ticket_select' },
                        { text: '‚ùå –£–¥–∞–ª–∏—Ç—å –±–∏–ª–µ—Ç', callback_data: 'admin_delete_ticket_select' }
                    ],
                    [
                        { text: 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main' }
                    ]
                ]
            }
        });
    }

    async listTickets(chatId) {
        try {
            const tickets = await this.ticketService.getAllTickets();

            if (!tickets || tickets.length === 0) {
                return await this.bot.sendMessage(chatId, 'üì≠ –°–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤ –ø—É—Å—Ç');
            }

            let message = 'üéüÔ∏è <b>–°–ø–∏—Å–æ–∫ –±–∏–ª–µ—Ç–æ–≤:</b>\n\n';
            tickets.forEach(ticket => {
                message += `‚ñ´Ô∏è <b>${ticket.title}</b>\n` +
                    `ID: ${ticket.id}\n` +
                    `–î–∞—Ç–∞: ${new Date(ticket.event_date).toLocaleDateString()}\n` +
                    `–¶–µ–Ω–∞: ${ticket.price} —Ä—É–±.\n\n`;
            });

            await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
            await this.showMenu(chatId);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤:', error);
            await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∏–ª–µ—Ç–æ–≤');
        }
    }

    async startEditTicket(chatId) {
        await this.bot.sendMessage(chatId, '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –±–∏–ª–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:');
        this.userStates[chatId] = {
            isAdminAction: true,
            step: 'selecting_ticket_for_edit'
        };
    }

    async processEditTicketSelection(chatId, ticketId) {
        try {
            const ticket = await this.ticketService.getTicketById(ticketId);
            if (!ticket) {
                return await this.bot.sendMessage(chatId, '‚ùå –ë–∏–ª–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            this.userStates[chatId] = {
                isAdminAction: true,
                step: this.editSteps.TITLE,
                ticketId: ticket.id,
                originalTicket: ticket,
                editedTicket: { ...ticket.dataValues }
            };

            await this.showEditFieldMenu(chatId, 'title');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–∞:', error);
            await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–∞');
        }
    }

    async showEditFieldMenu(chatId, field) {
        const state = this.userStates[chatId];
        const ticket = state.editedTicket;

        let message = `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–∞ ID: ${ticket.id}</b>\n\n`;
        message += `–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ <b>${this.getFieldName(field)}</b>:\n` +
                  `${ticket[field] || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
                  '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';

        const keyboard = [
            [{ text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: `edit_skip_${field}` }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'edit_cancel' }],
            [{ text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å', callback_data: 'edit_finish' }]
        ];

        await this.bot.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            reply_markup: { inline_keyboard: keyboard }
        });
    }

    async processEditStep(chatId, text) {
        const state = this.userStates[chatId];
        if (!state) return;

        try {
            switch (state.step) {
                case this.editSteps.TITLE:
                    if (text.length < 3) {
                        await this.bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
                        return;
                    }
                    state.editedTicket.title = text;
                    state.step = this.editSteps.DESCRIPTION;
                    await this.showEditFieldMenu(chatId, 'description');
                    break;

                case this.editSteps.DESCRIPTION:
                    state.editedTicket.description = text;
                    state.step = this.editSteps.DATE;
                    await this.showEditFieldMenu(chatId, 'event_date');
                    break;

                case this.editSteps.DATE:
                    if (!this.validateDate(text)) {
                        await this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î');
                        return;
                    }
                    state.editedTicket.event_date = text;
                    state.step = this.editSteps.LOCATION;
                    await this.showEditFieldMenu(chatId, 'event_location');
                    break;

                case this.editSteps.LOCATION:
                    if (text.length < 5) {
                        await this.bot.sendMessage(chatId, '‚ùå –ú–µ—Å—Ç–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤');
                        return;
                    }
                    state.editedTicket.event_location = text;
                    state.step = this.editSteps.PRICE;
                    await this.showEditFieldMenu(chatId, 'price');
                    break;

                case this.editSteps.PRICE:
                    const price = parseFloat(text);
                    if (isNaN(price) || price <= 0) {
                        await this.bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)');
                        return;
                    }
                    state.editedTicket.price = price;
                    state.step = this.editSteps.IMAGE;
                    await this.showEditFieldMenu(chatId, 'image_url');
                    break;

                case this.editSteps.IMAGE:
                    state.editedTicket.image_url = text;
                    state.step = this.editSteps.CONFIRM;
                    await this.showEditConfirmation(chatId);
                    break;

                default:
                    await this.bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                    delete this.userStates[chatId];
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —à–∞–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö');
            delete this.userStates[chatId];
        }
    }

    async handleEditCallback(chatId, data) {
        const state = this.userStates[chatId];
        if (!state) return;

        try {
            if (data === 'edit_cancel') {
                delete this.userStates[chatId];
                await this.bot.sendMessage(chatId, '‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
                await this.showMenu(chatId);
                return;
            }

            if (data.startsWith('edit_skip_')) {
                const field = data.replace('edit_skip_', '');
                const nextField = this.getNextField(field);
                
                if (nextField) {
                    state.step = this.editSteps[nextField.toUpperCase()];
                    await this.showEditFieldMenu(chatId, nextField);
                } else {
                    state.step = this.editSteps.CONFIRM;
                    await this.showEditConfirmation(chatId);
                }
                return;
            }

            if (data === 'edit_finish') {
                await this.showEditConfirmation(chatId);
                return;
            }

            if (data === 'edit_confirm') {
                const { ticketId, editedTicket } = state;
                const updatedTicket = await this.ticketService.updateTicket(ticketId, editedTicket);
                delete this.userStates[chatId];
                
                await this.bot.sendMessage(chatId, `‚úÖ –ë–∏–ª–µ—Ç "${updatedTicket.title}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!`);
                await this.showMenu(chatId);
                return;
            }

            if (data === 'edit_continue') {
                state.step = this.editSteps.TITLE;
                await this.showEditFieldMenu(chatId, 'title');
                return;
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
            await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã');
            delete this.userStates[chatId];
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getFieldName(field) {
        const names = {
            title: '–ù–∞–∑–≤–∞–Ω–∏–µ',
            description: '–û–ø–∏—Å–∞–Ω–∏–µ',
            event_date: '–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è',
            event_location: '–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è',
            price: '–¶–µ–Ω–∞',
            image_url: '–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
        };
        return names[field] || field;
    }

    validateDate(dateString) {
        const regex = /^\d{4}-\d{2}-\d{2}$/;
        if (!regex.test(dateString)) return false;
        const date = new Date(dateString);
        return date instanceof Date && !isNaN(date);
    }

    getNextField(currentField) {
        const fieldsOrder = ['title', 'description', 'event_date', 'event_location', 'price', 'image_url'];
        const currentIndex = fieldsOrder.indexOf(currentField);
        return currentIndex < fieldsOrder.length - 1 ? fieldsOrder[currentIndex + 1] : null;
    }

    async showEditConfirmation(chatId) {
        const state = this.userStates[chatId];
        const original = state.originalTicket;
        const edited = state.editedTicket;

        let message = '‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n\n';
        message += `<b>–ë–∏–ª–µ—Ç ID:</b> ${original.id}\n\n`;

        const fields = ['title', 'description', 'event_date', 'event_location', 'price', 'image_url'];
        let hasChanges = false;

        fields.forEach(field => {
            if (original[field] !== edited[field]) {
                hasChanges = true;
                message += `üîπ <b>${this.getFieldName(field)}:</b>\n` +
                          `–ë—ã–ª–æ: ${original[field] || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
                          `–°—Ç–∞–ª–æ: ${edited[field] || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n`;
            }
        });

        if (!hasChanges) {
            message += '‚ö†Ô∏è –í—ã –Ω–µ –≤–Ω–µ—Å–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π';
        }

        await this.bot.sendMessage(chatId, message, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'edit_confirm' },
                        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'edit_cancel' }
                    ],
                    [
                        { text: 'üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', callback_data: 'edit_continue' }
                    ]
                ]
            }
        });
    }

    async startDeleteTicket(chatId) {
        await this.bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ ID –±–∏–ª–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:');
        this.userStates[chatId] = {
            isAdminAction: true,
            step: 'selecting_ticket_for_delete'
        };
    }

    async processDeleteTicket(chatId, ticketId) {
        try {
            const result = await this.ticketService.deleteTicket(ticketId);
            if (result) {
                await this.bot.sendMessage(chatId, `‚úÖ –ë–∏–ª–µ—Ç —Å ID ${ticketId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
                await this.showMenu(chatId);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–∞:', error);
            await this.bot.sendMessage(chatId, `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–∏–ª–µ—Ç —Å ID ${ticketId}`);
        }
    }
}