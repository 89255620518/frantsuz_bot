export class EventWizard {
    constructor(bot, ticketService, userStates) {
        this.bot = bot;
        this.ticketService = ticketService;
        this.userStates = userStates;
    }

    async startCreation(chatId) {
        await this.bot.sendMessage(chatId, '–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ. –í–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —à–∞–≥–∞–º:');

        this.userStates[chatId] = {
            isAdminAction: true,
            wizard: 'event',
            step: 'title',
            data: {}
        };

        await this.askForTitle(chatId);
    }

    async handleMessage(msg) {
        const chatId = msg.chat.id;
        const text = msg.text;
        const userState = this.userStates[chatId];

        if (!userState || userState.wizard !== 'event') return false;

        try {
            switch (userState.step) {
                case 'title': return this.handleTitle(chatId, text);
                case 'description': return this.handleDescription(chatId, text);
                case 'date': return this.handleDate(chatId, text);
                case 'time': return this.handleTime(chatId, text);
                case 'price': return this.handlePrice(chatId, text);
                case 'image': return this.handleImage(chatId, text);
                case 'location': return this.handleLocation(chatId, text);
                default: return false;
            }
        } catch (error) {
            console.error('EventWizard error:', error);
            await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            delete this.userStates[chatId];
            return true;
        }
    }

    async askForTitle(chatId) {
        await this.bot.sendMessage(chatId, '1. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', {
            reply_markup: { force_reply: true }
        });
        this.userStates[chatId].step = 'title';
    }

    async handleTitle(chatId, text) {
        if (!text || text.length < 3) {
            await this.bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:');
            return true;
        }

        this.userStates[chatId].data.title = text;
        await this.askForDescription(chatId);
        return true;
    }

    async askForDescription(chatId) {
        await this.bot.sendMessage(chatId, '2. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:', {
            reply_markup: { force_reply: true }
        });
        this.userStates[chatId].step = 'description';
    }

    async handleDescription(chatId, text) {
        if (!text || text.length < 10) {
            await this.bot.sendMessage(chatId, '‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:');
            return true;
        }

        this.userStates[chatId].data.description = text;
        await this.askForDate(chatId);
        return true;
    }

    async askForDate(chatId) {
        await this.bot.sendMessage(chatId, '3. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):', {
            reply_markup: { force_reply: true }
        });
        this.userStates[chatId].step = 'date';
    }

    async handleDate(chatId, text) {
        if (!/^\d{2}\.\d{2}\.\d{4}$/.test(text)) {
            await this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:');
            return true;
        }

        this.userStates[chatId].data.date = text;
        await this.askForTime(chatId);
        return true;
    }

    async askForTime(chatId) {
        await this.bot.sendMessage(chatId, '4. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–ß–ß:–ú–ú):', {
            reply_markup: { force_reply: true }
        });
        this.userStates[chatId].step = 'time';
    }

    async handleTime(chatId, text) {
        if (!/^\d{2}:\d{2}$/.test(text)) {
            await this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú:');
            return true;
        }

        this.userStates[chatId].data.time = text;
        await this.askForPrice(chatId);
        return true;
    }

    async askForPrice(chatId) {
        await this.bot.sendMessage(chatId, '5. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞ (—Ä—É–±):', {
            reply_markup: { force_reply: true }
        });
        this.userStates[chatId].step = 'price';
    }

    async handlePrice(chatId, text) {
        const price = parseFloat(text);
        if (isNaN(price)) {
            await this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:');
            return true;
        }

        this.userStates[chatId].data.price = price;
        await this.askForImage(chatId);
        return true;
    }

    async askForImage(chatId) {
        await this.bot.sendMessage(chatId, '6. –ü—Ä–∏—à–ª–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', {
            reply_markup: { force_reply: true }
        });
        this.userStates[chatId].step = 'image';
    }

    async handleImage(chatId, text) {
        if (!text || !text.startsWith('http')) {
            await this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É:');
            return true;
        }

        this.userStates[chatId].data.image_url = text;
        await this.askForLocation(chatId);
        return true;
    }

    async askForLocation(chatId) {
        await this.bot.sendMessage(chatId, '7. –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:', {
            reply_markup: { force_reply: true }
        });
        this.userStates[chatId].step = 'location';
    }

    async handleLocation(chatId, text) {
        if (!text || text.length < 3) {
            await this.bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:');
            return true;
        }

        const userState = this.userStates[chatId];
        userState.data.event_location = text;

        const [day, month, year] = userState.data.date.split('.');
        const [hours, minutes] = userState.data.time.split(':');
        const eventDate = new Date(`${year}-${month}-${day}T${hours}:${minutes}:00`);

        try {
            const ticketData = {
                title: userState.data.title,
                description: userState.data.description,
                image_url: userState.data.image_url,
                event_date: eventDate, // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date
                event_location: userState.data.event_location,
                price: userState.data.price
                // ticket_number –∏ is_used –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            };

            const newEvent = await this.ticketService.createTicket(ticketData);
            delete this.userStates[chatId];

            const formattedDate = `${day}.${month}.${year}`;

            await this.bot.sendMessage(chatId, 
                `‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n\n` +
                `üé≠ <b>${newEvent.title}</b>\n` +
                `üìÖ ${formattedDate} –≤ ${userState.data.time}\n` +
                `üìç ${newEvent.event_location}\n` +
                `üíµ ${newEvent.price} —Ä—É–±.\n\n` +
                `ID: ${newEvent.id}`,
                { parse_mode: 'HTML' }
            );
            
            return true;
        } catch (error) {
            console.error('Event creation error:', error);
            await this.bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è');
            delete this.userStates[chatId];
            return true;
        }
    }
}