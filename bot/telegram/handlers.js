import { User } from '../models/User.js';
import { bot } from './botInstance.js';
import { events } from '../../data/events.js';
import { userStates } from '../state.js';
import { processPayment, checkPaymentStatus } from '../services/paykeeper.js';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const showMainMenu = async (chatId) => {
    await bot.sendMessage(chatId, 'üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üçΩÔ∏è –ú–µ–Ω—é', web_app: { url: process.env.WEB_APP_URL_MENU } },
                    { text: 'üéØ –ë–∏–ª—å—è—Ä–¥', web_app: { url: process.env.WEB_APP_URL_BILLARD } }
                ],
                [
                    { text: 'üé§ –ö–∞—Ä–∞–æ–∫–µ', web_app: { url: process.env.WEB_APP_URL_CARAOKE } },
                    { text: 'üíø –î–∏—Å–∫–æ-–±–∞—Ä', web_app: { url: process.env.WEB_APP_URL_dISCO } }
                ],
                [
                    { text: 'üõãÔ∏è –õ–∞—É–Ω–∂ –∑–æ–Ω–∞', web_app: { url: process.env.WEB_APP_URL_LAUNZH } },
                    { text: 'üéÆ Playstation', web_app: { url: process.env.WEB_APP_URL_PLAYSTATIONS } }
                ],
                [
                    { text: 'üé≤ –ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã', web_app: { url: process.env.WEB_APP_URL_TABLEPLAY } },
                    { text: 'üéüÔ∏è –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã', callback_data: 'show_tickets' }
                ],
                [
                    { text: 'üõéÔ∏è –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', web_app: { url: process.env.WEB_APP_URL_RESERVE } },
                    { text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data: 'contacts' }
                ]
            ]
        }
    });
};

const showEventsList = async (chatId) => {
    if (!events?.length) {
        return bot.sendMessage(chatId, 'üé≠ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!');
    }

    await bot.sendMessage(chatId, 'üéüÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:');

    for (const event of events) {
        if (!event.id || !event.title) continue;

        const caption = `üéüÔ∏è *${event.title}*\nüìÖ ${event.date || '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'} –≤ ${event.time || '–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\nüìç ${event.location || '–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\nüí∞ ${event.price || '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'} —Ä—É–±.\n\n${event.description || ''}`;

        await bot.sendPhoto(chatId, event.image || 'https://via.placeholder.com/500', {
            caption,
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç', callback_data: `buy_ticket_${event.id}` }]
                ]
            }
        });
    }
};

const startTicketPurchase = async (chatId, eventId, userId) => {
    try {
        const event = events.find(e => e.id === eventId);
        if (!event) {
            return bot.sendMessage(chatId, '‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        }

        const user = await User.findOne({ where: { telegram_id: userId || chatId } });
        if (!user) {
            return bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start');
        }

        userStates[chatId] = {
            eventId: event.id,
            step: 'name',
            eventData: event,
            dbUserId: user.telegram_id
        };

        await bot.sendMessage(
            chatId,
            `üéüÔ∏è *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞*\n\n` +
            `üé≠ *${event.title}*\n` +
            `üìÖ ${event.date || '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'} –≤ ${event.time || '–≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
            `üìç ${event.location || '–ú–µ—Å—Ç–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
            `üí∞ *${event.price || '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'} —Ä—É–±.*\n\n` +
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é*:`,
            { parse_mode: 'Markdown', reply_markup: { force_reply: true } }
        );

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞:', error);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

const completeTicketPurchase = async (chatId, userState) => {
    try {
        const user = await User.findOne({ where: { telegram_id: userState.dbUserId } });
        if (!user) {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        await user.update({
            phone: userState.phone,
            email: userState.email
        });

        const ticketNumber = `FR-${Date.now()}-${Math.floor(Math.random() * 1000)}`;

        const ticketData = {
            number: ticketNumber,
            event: userState.eventData,
            customer: {
                name: userState.name,
                phone: userState.phone,
                email: userState.email,
            },
            price: userState.eventData.price
        };

        await bot.sendMessage(
            chatId,
            'üîÑ *–°–æ–∑–¥–∞–µ–º –≤–∞—à –±–∏–ª–µ—Ç...*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.',
            { parse_mode: 'Markdown' }
        );

        const paymentResult = await processPayment(bot, chatId, ticketData);

        if (!paymentResult.success) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞:', error);
        await bot.sendMessage(
            chatId,
            '‚ùå *–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\nüìû +7(968)090-55-50',
            { parse_mode: 'Markdown' }
        );
    } finally {
        delete userStates[chatId];
    }
};

const showContacts = async (chatId) => {
    const contactsText = `üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª—É–±–∞ "–§—Ä–∞–Ω—Ü—É–∑":

üìç –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –°–∞–ª—Ç—ã–∫–æ–≤—Å–∫–∞—è, 49–ê
‚òé –¢–µ–ª–µ—Ñ–æ–Ω: +7(968) 090-55-50
üì± –ë–∞–Ω–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: +7(968) 091-55-50
‚úâ Email: order@wetop.ru

üïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: 
–ü–Ω-–ß—Ç: —Å 12:00 –¥–æ 00:00
–ü—Ç-–°–±: —Å 12:00 –¥–æ 02:00
–í—Å: —Å 12:00 –¥–æ 00:00`;

    await bot.sendMessage(chatId, contactsText, {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É', url: 'https://yandex.ru/maps/-/CDqZIVX8' }]
            ]
        }
    });
};

// –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
export const setupEventHandlers = () => {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start (—Å–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)
    bot.onText(/\/start/, async (msg) => {
        const chatId = msg.chat?.id;
        const user = msg.from;

        if (!chatId || !user?.id) {
            console.error('Invalid message structure:', { msg });
            return bot.sendMessage(
                chatId || user?.id,
                '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
            );
        }

        try {
            const result = await User.findOrCreateFromTelegram(user);
            if (!result || !result.user) {
                throw new Error('Failed to create or find user');
            }

            const { user: dbUser, created } = result;
            
            console.log(`User ${created ? 'created' : 'updated'}:`, {
                id: dbUser.telegram_id,
                username: dbUser.username,
                first_name: dbUser.first_name
            });

            const welcomeText = `
            üé≠ ${created ? '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å' : '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º'}, ${dbUser.first_name} –≤ –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª—É–± "–§—Ä–∞–Ω—Ü—É–∑"!

            ‚ú® ${created ? '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!' : '–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!'}

            üéâ –í–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—á–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–¥–µ—Å—å:

            ‚Ä¢ üéØ –ë–∏–ª—å—è—Ä–¥ –¥–ª—è –∏—Å—Ç–∏–Ω–Ω—ã—Ö —Ü–µ–Ω–∏—Ç–µ–ª–µ–π
            ‚Ä¢ üé§ –ö–∞—Ä–∞–æ–∫–µ —Å –æ–±—à–∏—Ä–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –ø–µ—Å–µ–Ω
            ‚Ä¢ üéÆ –ò–≥—Ä–æ–≤—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏ –¥–ª—è –¥—Ä—É–∂–µ—Å–∫–∏—Ö –±–∞—Ç–∞–ª–∏–π
            ‚Ä¢ üé≤ –ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            ‚Ä¢ üíø –î–∏—Å–∫–æ-–±–∞—Ä —Å –ª—É—á—à–∏–º–∏ DJ
            ‚Ä¢ üõãÔ∏è –õ–∞—É–Ω–∂ –∑–æ–Ω–∞ –¥–ª—è —É—é—Ç–Ω—ã—Ö –ø–æ—Å–∏–¥–µ–ª–æ–∫
            ‚Ä¢ üçΩÔ∏è –ë–∞—Ä –∏ –∫—É—Ö–Ω—è —Å –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–º–∏ –±–ª—é–¥–∞–º–∏

            üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
                `;

            await bot.sendMessage(chatId, welcomeText, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üçΩÔ∏è –ú–µ–Ω—é', web_app: { url: process.env.WEB_APP_URL_MENU } },
                            { text: 'üéØ –ë–∏–ª—å—è—Ä–¥', web_app: { url: process.env.WEB_APP_URL_BILLARD } }
                        ],
                        [
                            { text: 'üé§ –ö–∞—Ä–∞–æ–∫–µ', web_app: { url: process.env.WEB_APP_URL_CARAOKE } },
                            { text: 'üíø –î–∏—Å–∫–æ-–±–∞—Ä', web_app: { url: process.env.WEB_APP_URL_dISCO } }
                        ],
                        [
                            { text: 'üõãÔ∏è –õ–∞—É–Ω–∂ –∑–æ–Ω–∞', web_app: { url: process.env.WEB_APP_URL_LAUNZH } },
                            { text: 'üéÆ Playstation', web_app: { url: process.env.WEB_APP_URL_PLAYSTATIONS } }
                        ],
                        [
                            { text: 'üé≤ –ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã', web_app: { url: process.env.WEB_APP_URL_TABLEPLAY } },
                            { text: 'üéüÔ∏è –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã', callback_data: 'show_tickets' }
                        ],
                        [
                            { text: 'üõéÔ∏è –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', web_app: { url: process.env.WEB_APP_URL_RESERVE } },
                            { text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data: 'contacts' }
                        ]
                    ]
                }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤ /start:', error);
            await bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /tickets
    bot.onText(/\/tickets/, (msg) => {
        if (msg?.chat?.id) showEventsList(msg.chat.id);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query
    bot.on('callback_query', async (callbackQuery) => {
        const msg = callbackQuery.message;
        if (!msg?.chat?.id) return;

        const chatId = msg.chat.id;
        const data = callbackQuery.data;
        const user = callbackQuery.from;

        try {
            if (!data) {
                await bot.answerCallbackQuery(callbackQuery.id);
                return;
            }

            if (data === 'contacts') {
                await showContacts(chatId);
            }
            else if (data === 'show_tickets') {
                await showEventsList(chatId);
            }
            else if (data.startsWith('buy_ticket_')) {
                const eventId = parseInt(data.split('_')[2]);
                if (!isNaN(eventId)) {
                    await startTicketPurchase(chatId, eventId, user?.id);
                }
            }
            else if (data.startsWith('check_payment_')) {
                const invoiceId = data.split('_')[2];
                if (invoiceId) {
                    await checkPaymentStatus(bot, chatId, invoiceId);
                }
            }
            else if (data === 'cancel_payment') {
                delete userStates[chatId];
                await bot.sendMessage(
                    chatId,
                    'üíî *–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã –Ω–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –±–∏–ª–µ—Ç!*\n\n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ? –ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å!',
                    { parse_mode: 'Markdown' }
                );
                setTimeout(() => showMainMenu(chatId), 3000);
            }

            await bot.answerCallbackQuery(callbackQuery.id);
        } catch (error) {
            console.error('Error in callback:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on('message', async (msg) => {
        if (!msg?.chat?.id || !msg.text || msg.text.startsWith('/')) return;

        const chatId = msg.chat.id;
        const userState = userStates[chatId];
        if (!userState) return;

        try {
            if (userState.step === 'name') {
                const nameParts = msg.text.trim().split(/\s+/);
                if (nameParts.length < 2) {
                    return bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª');
                }

                userState.name = msg.text;
                userState.step = 'phone';
                await bot.sendMessage(chatId, 'üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:', {
                    reply_markup: { force_reply: true }
                });
            }
            else if (userState.step === 'phone') {
                const phoneRegex = /^(\+7|8)[0-9]{10}$/;
                const cleanPhone = msg.text.replace(/[^\d+]/g, '');

                if (!phoneRegex.test(cleanPhone)) {
                    return bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX');
                }

                userState.phone = cleanPhone;
                userState.step = 'email';
                await bot.sendMessage(chatId, 'üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email (–Ω–∞ –Ω–µ–≥–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–∏–ª–µ—Ç):', {
                    reply_markup: { force_reply: true }
                });
            }
            else if (userState.step === 'email') {
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(msg.text)) {
                    return bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
                }

                userState.email = msg.text;
                await completeTicketPurchase(chatId, userState);
            }
        } catch (error) {
            console.error('Error in message handler:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });
};